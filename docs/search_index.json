[
["index.html", "taxize book Chapter 1 taxize manual 1.1 Info 1.2 Citing taxize 1.3 Installation", " taxize book built on 2019-08-14 - for taxize v0.9.8.9139 Chapter 1 taxize manual An R package for taxonomic information from around the web. taxize interacts with a suite of web APIs for taxonomic tasks, such as getting database specific taxonomic identifiers, verifying species names, getting taxonomic hierarchies, fetching downstream and upstream taxonomic names, getting taxonomic synonyms, converting scientific to common names and vice versa, and more. 1.1 Info Code: https://github.com/ropensci/taxize/ Issues/Bug reports: https://github.com/ropensci/taxize/issues CRAN: https://cran.rstudio.com/web/packages/taxize/ 1.2 Citing taxize Scott Chamberlain and Eduard Szocs (2013). taxize - taxonomic search and retrieval in R. F1000Research, 2:191. URL: http://f1000research.com/articles/2-191/v2. Scott Chamberlain, Eduard Szoecs, Zachary Foster, Zebulun Arendsee, Carl Boettiger, Karthik Ram, Ignasi Bartomeus, John Baumgartner, James O’Donnell, Jari Oksanen, Bastian Greshake Tzovaras, Philippe Marchand, Vinh Tran, Maëlle Salmon, Gaopeng Li, and Matthias Grenié. (2019) taxize: Taxonomic information from around the web. R package version 0.9.8. https://github.com/ropensci/taxize 1.3 Installation Stable version from CRAN install.packages(&quot;taxize&quot;) Development version from GitHub devtools::install_github(&quot;ropensci/taxize&quot;) Load library library(&#39;taxize&#39;) "],
["intro.html", "Chapter 2 Introduction 2.1 User interface 2.2 Related tools", " Chapter 2 Introduction 2.1 User interface taxize is designed around making certain use cases easier - abstracting away the details of what each taxonomic data source requires for that use case. Some of the use cases covered in taxize: Taxonomic identifier from a taxonomic name Taxonomic name from a taxonomic identifier Taxonomic name from a vernacular name Vernacular name from a taxonomic name Taxonomic hierarchy/classification from identifier or name Children of an identifier or name Immediate names above an identifier or name All taxa downstream to a certain rank from identifier or name Taxonomic name synonyms from identifier or name Lowest common taxon and rank for an identifier or name Resolve taxonomic names, i.e., fix spelling errors Make a taxonomic tree from identifiers or names 2.2 Related tools For other related packages see Other packages "],
["data-sources.html", "Chapter 3 Data sources", " Chapter 3 Data sources Data sources in taxize are presented below. Note that data sources in taxize may change through time as data sources go away and new ones become available. Souce Function prefix API Docs API key Encylopedia of Life eol link link Taxonomic Name Resolution Service tnrs “api.phylotastic.org/tnrs” none Integrated Taxonomic Information Service itis link none Global Names Resolver gnr link none Global Names Index gni link none IUCN Red List iucn link link Tropicos tp link link Theplantlist dot org tpl ** none Catalogue of Life col link none National Center for Biotechnology Information ncbi none none CANADENSYS Vascan name search API vascan link none International Plant Names Index (IPNI) ipni link none Barcode of Life Data Systems (BOLD) bold link none National Biodiversity Network (UK) nbn link none Index Fungorum fg link none EU BON eubon link none Index of Names (ION) ion link none Open Tree of Life (TOL) tol link none World Register of Marine Species (WoRMS) worms link none NatureServe natserv link link Wikipedia wiki link none "],
["authentication.html", "Chapter 4 Authentication", " Chapter 4 Authentication First, what is an API? An API is an Application Programming Interface. The term “API” can be used for lots of scenarios, but in this case we’re talking about web APIs, or APIs (interfaces) to web resources. taxize interacts with remote databases on the web via their APIs. You don’t need to worry about the details of how that all works; just know that some of them require authentication and some do not. Some data sources in taxize require authentication. Here’s a breakdown of which ones require authentication, and how to do authentication by data source: Tropicos: Request a Tropicos API key from http://services.tropicos.org/help?requestkey. EOL: Request an EOL API key at https://eol.org/users/sign_up NCBI Entrez: From NCBI’s docs: “E-utils users are allowed 3 requests/second without an API key. Create an API key (in your account at https://www.ncbi.nlm.nih.gov/account/) to increase your e-utils limit to 10 requests/second. Contact our help department (eutilities@ncbi.nlm.nih.gov) if you need higher throughput. Only one API Key per user. Replacing or deleting will inactivate the current key. Refer to documentation (https://www.ncbi.nlm.nih.gov/books/NBK25497/) for more.” IUCN: Request an API key at http://apiv3.iucnredlist.org/api/v3/token. Note that some users have reported waiting many weeks for a key. Save your API keys as the following names either as R options or environment variables: Tropicos: ‘TROPICOS_KEY’ EOL: ‘EOL_KEY’ IUCN: ‘IUCN_REDLIST_KEY’ ENTREZ: ‘ENTREZ_KEY’ We’ll read in your keys if we can find them in either R options or environment variables. See ?Startup in R for details on how to store R options or environment variables. We recommend using environment variables (https://en.wikipedia.org/wiki/Environment_variable) over R options in general. An added bonus of using environment variables is that they are widley used across programming languages and computing environments. When in R, taxize helper functions are provided to help you obtain and setup API keys for each data source that requires them: taxize::use_tropicos() taxize::use_eol() taxize::use_entrez() taxize::use_iucn() "],
["identifiers.html", "Chapter 5 Identifiers 5.1 get functions 5.2 get functions return objects 5.3 identifier notes 5.4 Looking up taxa on the web", " Chapter 5 Identifiers Taxonomic identifiers are a central concept in taxize - and around which many things depend on. We often either need to get to an identifier for each name in question, or take an identifier to do something else, for example get a taxonomic classification. (Note: See Progress and state for details on keeping track of progress maintaining state in get_ functions, and functions that use get_ functions under the hood.) 5.1 get functions There’s a family of functions, each targeted at a specific data source, for getting taxonomic identifiers from names. They all start with the prefix get_, and end with an abbreviation for the data source. They are: get_wiki get_gbifid get_iucn get_natservid get_colid get_boldid get_nbnid get_tsn get_wormsid get_ids get_pow get_uid get_ubioid get_tolid get_tpsid get_eolid Another set of related functions with a trailing underscore (e.g., get_uid_()) are available for all data sources, but they do not do interactive usage, but instead provide all data. That is, if you use e.g., get_tsn() and there is more than one option returned from ITIS, you will be given a prompt which will require your input. If you want to avoid potential prompts, use get_tsn_() instead, and then manipulate/filter data yourself. 5.2 get functions return objects The returned data from get_* functions is either an NA_character_ if no match, or a character string or numeric (some data providers use numeric taxonomic identifiers, while others use alphanumeric identifiers) if a match. The length can be greater than one as all the functions are vectorized. There are a number of attributes attached to the output, where each attributes length equals the length of the id vector: class: the class of the object match: whether a match was found or not multiple_matches: whether there were multiple matches or not pattern_match: whether there was a match by pattern (i.e., regex) uri: the URI/URL for the taxon An example return from a get_* function: [1] &quot;50157568&quot; attr(,&quot;class&quot;) [1] &quot;tpsid&quot; attr(,&quot;match&quot;) [1] &quot;found&quot; attr(,&quot;multiple_matches&quot;) [1] TRUE attr(,&quot;pattern_match&quot;) [1] FALSE attr(,&quot;uri&quot;) [1] &quot;http://tropicos.org/Name/50157568&quot; 5.3 identifier notes Taxonomic identifiers are unique to the data source. That is, the taxonomic ID for any individual taxon in data source A is different from that in data source B, and different from that in data source C, etc. For example, the taxonomic ID for Pinus contorta in NCBI is 3339, the ID in ITIS is 183327, and the ID in COL is 13c40c3f2be0b0965bddf948d2b3115f. Taxonomic identifiers vary among data sources in their structure. That is, some are numeric (only numbers), some are alphanumeric (combination of numbers and letters), and one has an odd structure with letters, numbers and symbols (Nature Serve, e.g., ELEMENT_GLOBAL.2.147775). Most data sources provide numeric identifiers. Wikipedia is unusual in that there are no numeric/alphanumeric/etc. taxonomic identifiers for each name - instead, the “identifier” IS the name. … 5.4 Looking up taxa on the web If you want to look up the taxon page for any taxa that you’ve passed through get_* functions you can do so by using the uri attributes returned from the function. For example: x &lt;- get_tsn(&#39;Pinus contorta&#39;) browseURL(attr(x, &#39;uri&#39;)) "],
["classification.html", "Chapter 6 Classification 6.1 Usage 6.2 Other sections? 6.3 Related", " Chapter 6 Classification The classification() function is one of the workhorses of the taxize package. A taxonomic classification - or hierarchy - is a fundamental set of information about any taxon. Biological taxonomy is arranged in a hierarchical fashion, with each species taxon name fitting into genera, and genera fitting into families, and so on all the way up to just a few categories of very high level organization. 6.1 Usage library(taxize) classification() has a number of high level features: It is vectorized. That is, it accepts any number of inputs and the output length should equal the input length It accepts various inputs: Taxonomic names as character strings Taxonomic identifiers as character stings or numeric values Any output of the various get_*() functions When there is data available, it always returns a data.frame, facilitating use downstream 6.2 Other sections? asdfadfasdf 6.3 Related Related functions include (note to self: link to these sections when available): children downstream upstream lowest_common "],
["progress-state.html", "Chapter 7 Progress and state 7.1 Progress 7.2 State", " Chapter 7 Progress and state In taxize v0.9.8 a new set of features was introduced to keep track of progress of going through each name passed to get_*() functions, better messages about progress and better summary info, and the ability to restart from where you left off if a get_*() function gets interrupted. 7.1 Progress Within each get_*() function we keep track of progress. We do this using the progressor R6 class, an internal taxize class. progessor is not meant to be used by the taxize user. Within each get_*() function we initiate a new progress object: prog &lt;- progressor$new(...) As the get_*() function progresses the prog object is updated with data and metadata as each name is gone through in the for loop. In addition, prog handles nice print statements and summary info, which can also be suppressed as needed. progressor is not exported but when you have taxize loaded you can go to its manual file (?progressor) to dig into how it works. taxize_options() is a new function in taxize, introduced in v.0.9.8. It is meant to manage package wide options in general. The first option it has is taxon_state_messages, which is a boolean (default: TRUE) which controls messages printed by progressor - you can set taxon_state_messages=FALSE if you want to suppress messages from progressor. Messages look like: get_uid(c(&quot;Chironomus riparius&quot;, &quot;howdy&quot;)) #&gt; ══ 2 queries ═══════════════ #&gt; #&gt; Retrieving data for taxon &#39;Chironomus riparius&#39; #&gt; #&gt; ✔ Found: Chironomus+riparius #&gt; #&gt; Retrieving data for taxon &#39;howdy&#39; #&gt; #&gt; ✖ Not Found: foo bar #&gt; ══ Results ═════════════════ #&gt; #&gt; ● Total: 2 #&gt; ● Found: 1 #&gt; ● Not Found: 1 Giving: 2 queries: number of names being searched Retrieving data for ...: which name is being searched ✔ Found: ...: when a name is found, there’s a ✔ and the name ✖ Not Found: ...: when a name is not found, there’s a ✖ and the name At the end is a summary of number of names searched, number of names found and number of names not found 7.2 State The first parameter of every get_*() function now accepts either one or more taxonomic names OR a taxon_state object. A taxon_state object is an R6 object that helps keep track of where you are in a get_*() function call. The TLDR is that it means if you’re get_*() function gets interrupted because of any number of things (e.g., internet goes out, the dreaded curl timeout, you hit the wrong key, the remote data provider temporarily goes down) you can call taxon_last() and pass that in to your get_*() function to start from where you left off before the interruption. spp &lt;- names_list(&quot;species&quot;, 3) res &lt;- get_gbifid(spp) #&gt; ══ 3 queries ═══════════════ #&gt; ✔ Found: Morinda ammitia #&gt; ✔ Found: Cryptocarya myrcioides #&gt; ✔ Found: Scorzoneroides carpetana #&gt; ══ Results ═════════════════ #&gt; #&gt; ● Total: 3 #&gt; ● Found: 3 #&gt; ● Not Found: 0 z &lt;- taxon_last() z #&gt; &lt;taxon state&gt; #&gt; class: gbifid #&gt; elapsed (sec): 2.71 #&gt; count: 3 #&gt; Morinda ammitia: 5339850 #&gt; Cryptocarya myrcioides: 4183063 #&gt; Scorzoneroides carpetana: 3133528 z$taxa_remaining() #&gt; character(0) z$taxa_completed() #&gt; [1] &quot;Cryptocarya myrcioides&quot; &quot;Morinda ammitia&quot; #&gt; [3] &quot;Scorzoneroides carpetana&quot; z$count # active binding; no parens needed #&gt; [1] 3 See ?taxon_state with taxize loaded to get all the details on working with taxon state objects. "],
["other-packages.html", "Chapter 8 Other packages 8.1 packages taxize leverages 8.2 related packages", " Chapter 8 Other packages 8.1 packages taxize leverages There’s a number of packages that taxize builds on: bold rredlist rotl ritis worrms natserv wikitaxa You can use these packages individually if you’re only interested in the data from that one data source. Furthermore, each of these packages has more functionality for dealing with that specific data source. The benefit of using taxize is that it attemps to make a more consistent interface across the different data sources. 8.1.1 package: bold The bold package interfaces with BOLD Systems which hosts barcoding data, and includes taxonomic information. 8.1.2 package: rredlist The rredlist package interfaces with IUCN Red List of Threatened Species. They have various kinds of data around the life history of the various threatneed species, including taxonomic information. Important: An API key is required for this package. Request one at http://apiv3.iucnredlist.org/api/v3/token. It is not unusual to have to wait many weeks to get your key. 8.1.3 package: rotl The rotl package interfaces with the Open Tree of Life, curating an open phylogenetic tree of all life. 8.1.4 package: ritis The ritis package interfaces with the Integrated Taxonomic Information Service, taxonomic information on plants, animals, fungi, and microbes of North America and the world. 8.1.5 package: worrms The worrms package interfaces with the World Register of Marine Species, an authoritative classifcation and catalogue of marine names. 8.1.6 package: natserv The natserv package interfaces with the NatureServe, a biodiversity database. 8.1.7 package: wikitaxa The wikitaxa package interfaces with Wikispecies, Wikidata, and Wikipedia, facilitating extraction of taxonomic name information from each site. 8.2 related packages taxizesoap is no longer maintained. It was maintained for a number of years, with functionality for handling web services that used the SOAP protocol, an older web service protocol that has been largeley replaced with other protocols. Most if not all data sources that were in taxizesoap have been moved to taxize. "],
["taxizedb.html", "Chapter 9 taxizedb 9.1 other sections", " Chapter 9 taxizedb taxizedb arose out of a few things. First, some of the data sources used in taxize also provide complete dumps of all their data, usually as SQL databases. Second, when a user has a lot of operations to do, taxize can leave the user feeling like there could be a faster solution. That thing is taxizedb. 9.1 other sections … "],
["contributing.html", "Chapter 10 Contributing 10.1 Contributing to this book 10.2 Contributing to taxize", " Chapter 10 Contributing 10.1 Contributing to this book This book is created using bookdown. Each chapter is an Rmarkdown (.Rmd) file. While reading this book, click on the Edit button in the top navigation bar, which will bring you to the source file for that chapter. You can then make an edit right there in your browser, or you can clone down the repo and make a change locally, then send a pull request. The source for this book lives at https://github.com/ropenscilabs/taxize-book 10.2 Contributing to taxize 10.2.1 Bugs? Submit an issue on the Issues page - be sure to include R session information and a reproducible example. 10.2.2 Code contributions 10.2.2.1 Broad overview of contributing workflow Fork this repo to your Github account Clone your version on your account down to your machine from your account, e.g,. git clone https://github.com/&lt;yourgithubusername&gt;/taxize.git Make sure to track progress upstream (i.e., on our version of taxize at ropensci/taxize) by doing git remote add upstream https://github.com/ropensci/taxize.git. Before making changes make sure to pull changes in from upstream by doing either git fetch upstream then merge later or git pull upstream to fetch and merge in one step Make your changes (bonus points for making changes on a new feature branch) Please do write a test(s) for your changes if they affect code and not just docs (see Tests below) Push up to your account Submit a pull request to home base at ropensci/taxize 10.2.2.2 Tests To add tests, go to the folder tests/testthat/. Tests are generally organized as individual files for each exported function from the package (that is, listed as an export in the NAMESPACE file). If you are adding a new exported function, add a new test file. If you are changing an existing function, work in the tests file for that function, unless it doesn’t have tests, in which case make a new test file. The book R packages book provides a chapter on testing in general. Do consult that first if you aren’t familiar with testing in R. The easiest set up to run tests is from within an R session: library(devtools) library(testthat) # loads the package load_all() To test an individual test file test_file(&quot;tests/testthat/test-foobar.R&quot;) To run all tests devtools::test() If you are running tests that have skip_on_cran() in them, set Sys.setenv(NOT_CRAN = &quot;true&quot;) prior to running tests. 10.2.2.3 Making changes In addition to changing the code, do make sure to udpate the documentation if applicable. The R packages book book has a chapter on documentation you should read if you aren’t familiar. After code and documentation has been changed, update documentation by running either devtools::document() or roxygen2::roxygenise(). Make sure if you change what packages or even functions within packages are imported, most likely add the package to Imports in the DESCRIPTION file and list what functions are imported in the taxize-package.R file. Be conservative about adding new dependencies. 10.2.2.4 Style Make sure code, documentation, and comments are no more than 80 characters in width. Use &lt;- instead of = for assignment Always use snake_case (and all lowercase) instead of camelCase "],
["session-info.html", "Chapter 11 session info", " Chapter 11 session info Session info for this book sessioninfo::session_info() #&gt; ─ Session info ────────────────────────────────────────────────────────── #&gt; setting value #&gt; version R version 3.6.1 Patched (2019-07-17 r76848) #&gt; os macOS Mojave 10.14.6 #&gt; system x86_64, darwin15.6.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; ctype en_US.UTF-8 #&gt; tz US/Pacific #&gt; date 2019-08-14 #&gt; #&gt; ─ Packages ────────────────────────────────────────────────────────────── #&gt; package * version date lib source #&gt; ape 5.3 2019-03-17 [1] CRAN (R 3.6.0) #&gt; assertthat 0.2.1 2019-03-21 [1] CRAN (R 3.6.0) #&gt; bold 0.9.0.9100 2019-08-14 [1] local #&gt; bookdown 0.12 2019-07-11 [1] CRAN (R 3.6.0) #&gt; cli 1.1.0 2019-03-19 [1] CRAN (R 3.6.0) #&gt; codetools 0.2-16 2018-12-24 [1] CRAN (R 3.6.1) #&gt; crayon 1.3.4 2017-09-16 [1] CRAN (R 3.6.0) #&gt; crul 0.8.4 2019-08-02 [1] CRAN (R 3.6.0) #&gt; curl 4.0 2019-07-22 [1] CRAN (R 3.6.1) #&gt; data.table 1.12.2 2019-04-07 [1] CRAN (R 3.6.0) #&gt; digest 0.6.20 2019-07-04 [1] CRAN (R 3.6.0) #&gt; evaluate 0.14 2019-05-28 [1] CRAN (R 3.6.0) #&gt; foreach 1.4.7 2019-07-27 [1] CRAN (R 3.6.0) #&gt; htmltools 0.3.6 2017-04-28 [1] CRAN (R 3.6.0) #&gt; httpcode 0.2.0 2016-11-14 [1] CRAN (R 3.6.0) #&gt; iterators 1.0.12 2019-07-26 [1] CRAN (R 3.6.0) #&gt; jsonlite 1.6 2018-12-07 [1] CRAN (R 3.6.0) #&gt; knitr 1.24 2019-08-08 [1] CRAN (R 3.6.1) #&gt; lattice 0.20-38 2018-11-04 [1] CRAN (R 3.6.1) #&gt; magrittr 1.5 2014-11-22 [1] CRAN (R 3.6.0) #&gt; nlme 3.1-141 2019-08-01 [1] CRAN (R 3.6.0) #&gt; plyr 1.8.4 2016-06-08 [1] CRAN (R 3.6.0) #&gt; R6 2.4.0 2019-02-14 [1] CRAN (R 3.6.0) #&gt; Rcpp 1.0.2 2019-07-25 [1] CRAN (R 3.6.1) #&gt; reshape 0.8.8 2018-10-23 [1] CRAN (R 3.6.0) #&gt; reshape2 1.4.3 2017-12-11 [1] CRAN (R 3.6.0) #&gt; rmarkdown 1.14 2019-07-12 [1] CRAN (R 3.6.0) #&gt; rstudioapi 0.10 2019-03-19 [1] CRAN (R 3.6.0) #&gt; sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 3.6.0) #&gt; stringi 1.4.3 2019-03-12 [1] CRAN (R 3.6.0) #&gt; stringr 1.4.0 2019-02-10 [1] CRAN (R 3.6.0) #&gt; taxize * 0.9.8.9139 2019-08-14 [1] local #&gt; triebeard 0.3.0 2016-08-04 [1] CRAN (R 3.6.0) #&gt; urltools 1.7.3 2019-04-14 [1] CRAN (R 3.6.0) #&gt; withr 2.1.2 2018-03-15 [1] CRAN (R 3.6.0) #&gt; xfun 0.8 2019-06-25 [1] CRAN (R 3.6.0) #&gt; xml2 1.2.2 2019-08-09 [1] CRAN (R 3.6.1) #&gt; yaml 2.2.0 2018-07-25 [1] CRAN (R 3.6.0) #&gt; zoo 1.8-6 2019-05-28 [1] CRAN (R 3.6.0) #&gt; #&gt; [1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library "]
]
